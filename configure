#!/bin/bash
# configure
# aoneill - 01/16/17

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

CONFIG_DIR="$DIR/config"
FOLDERS="$CONFIG_DIR/folders"
LINKS="$CONFIG_DIR/links"

# Usage information
function usage() {
  cat << EOF
usage: $0 [OPTION]

Environment configuration utility

Options:
  -v, --verbose  Run with verbosity
  -d, --dry-run  Run without changing the environemnt (implies --verbose)
EOF
}

# Command-line argument parsing
function args() {
  # Flags
  export VERBOSE=0
  export DRY_RUN=0

  local _args="$@"
  while [[ ${1:0:1} == - ]]; do
    term="$1"
    case "$term" in
      # If no action should actually be taken during the configuration
      # Falls-through to verbose
      -d|--dry-run)
        export DRY_RUN=1
        ;;

      # Whether to output actions as they are taken
      -v|--verbose)
        export VERBOSE=1
        ;;

      # Give usage
      *)
        echo "error: Unknown flag '$term'"
        usage $_args
        return 1
        ;;
    esac

    shift 1
  done
}

# Inform the user of an action being taken, controlled by dry-run and
# verbose flags
function tell() {
  (( $VERBOSE )) && echo $@
  (( ! $DRY_RUN )) && $@
}

# Determine if positional arguments to 'ln' warrants the creation of a link
function will_ln() {
  # We ln if...
  # ...we have to create the destination directory
  ! [[ -d "$(dirname $2)" ]] && return 0

  # ...the destination is not a link
  [[ ! -h "$2" ]] && return 0

  # ...the destination is the wrong link
  [[ "$(readlink -f $2)" != "$(readlink -f $1)" ]] && return 0

  # Do not create the link
  return 1
}

# Take either a file or standard in and filter out existing directories
# The format of the input is a list of paths to folders
function dir_filter() {
  file=-
  [[ "$@" ]] && file="$@"

  cat $file | while IFS= read -r line; do
    # Check for existence
    [[ ! -d $line ]] && echo $line
  done
}

# Take either a file or standard in and filter out correct links
# The format of the input is a list of positional arguments to ln (src, name)
function ln_filter() {
  file=-
  [[ "$@" ]] && file="$@"

  cat $file | while IFS= read -r line; do
    # Check for linking
    will_ln $line && echo $line
  done
}

function init() {
  # Populate variables
  local _args="$@"
  args $@ || return
  shift $#

  # Needed for xargs usage
  export -f tell

  # Create folders
  # Create only if the directory does not yet exist
  sed -e "s|{{HOME}}|$HOME|g" "$FOLDERS" \
    | dir_filter | xargs -L 1 bash -c 'tell mkdir -p $@' _

  # Create links
  # First create the parent directory for the link destination, then the link
  # only if the operations are valid
  sed -e "s|{{HOME}}|$HOME|g" -e "s|{{GIT_ENV}}|$DIR|g" $LINKS \
    | awk '{ print $2; }' \
    | xargs -L 1 dirname \
    | dir_filter | xargs -L 1 bash -c 'tell mkdir -p $@' _
  sed -e "s|{{HOME}}|$HOME|g" -e "s|{{GIT_ENV}}|$DIR|g" $LINKS \
    | ln_filter | xargs -n 2 bash -c 'tell ln -fs $@' _
}

# Run init only when exec'd
EXEC=$(test "${BASH_SOURCE[0]}" != "${0}"; echo $?)
[[ "$EXEC" == "1" ]] && init $@
